(() => {
  // src/js/clipboard.js
  function fallbackCopyTextToClipboard(text) {
    let textArea = document.createElement("textarea");
    textArea.value = text;
    textArea.style.position = "fixed";
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    try {
      let successful = document.execCommand("copy");
      let msg = successful ? "successful" : "unsuccessful";
    } catch (err) {
    }
    document.body.removeChild(textArea);
  }
  function copyTextToClipboard(text) {
    if (!navigator.clipboard) {
      fallbackCopyTextToClipboard(text);
      return;
    }
    navigator.clipboard.writeText(text).then(function() {
    }, function(err) {
    });
  }

  // src/js/colorpicker/functions.js
  function clamp(nr, min, max) {
    return Math.min(Math.max(nr, min), max);
  }
  function rgb2hex(r, g, b) {
    return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
  }
  function hex2rgb(hex) {
    hex = parseInt(hex.indexOf("#") > -1 ? hex.substring(1) : hex, 16);
    return {
      r: hex >> 16,
      g: (hex & 65280) >> 8,
      b: hex & 255
    };
  }
  function rgb2hsl(r, g, b) {
    r /= 255, g /= 255, b /= 255;
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    let h;
    let s;
    const l = (max + min) / 2;
    if (max == min) {
      h = s = 0;
    } else {
      const d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
          break;
      }
      h /= 6;
    }
    return [h, s, l];
  }
  function hsl2rgb(h, s, l) {
    let r, g, b;
    if (s == 0) {
      r = g = b = l;
    } else {
      const hue2rgb = function hue2rgb2(p2, q2, t) {
        if (t < 0)
          t += 1;
        if (t > 1)
          t -= 1;
        if (t < 1 / 6)
          return p2 + (q2 - p2) * 6 * t;
        if (t < 1 / 2)
          return q2;
        if (t < 2 / 3)
          return p2 + (q2 - p2) * (2 / 3 - t) * 6;
        return p2;
      };
      const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      const p = 2 * l - q;
      r = hue2rgb(p, q, h + 1 / 3);
      g = hue2rgb(p, q, h);
      b = hue2rgb(p, q, h - 1 / 3);
    }
    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
  }
  function hex2hsb(hex) {
    const hsb = rgb2hsb(hex2rgb(hex));
    if (hsb.s === 0)
      hsb.h = 360;
    return hsb;
  }
  function rgb2hsb(rgb) {
    const hsb = {
      h: 0,
      s: 0,
      b: 0
    };
    const min = Math.min(rgb.r, rgb.g, rgb.b);
    const max = Math.max(rgb.r, rgb.g, rgb.b);
    const delta = max - min;
    hsb.b = max;
    hsb.s = max !== 0 ? 255 * delta / max : 0;
    if (hsb.s !== 0) {
      if (rgb.r === max) {
        hsb.h = (rgb.g - rgb.b) / delta;
      } else if (rgb.g === max) {
        hsb.h = 2 + (rgb.b - rgb.r) / delta;
      } else {
        hsb.h = 4 + (rgb.r - rgb.g) / delta;
      }
    } else {
      hsb.h = -1;
    }
    hsb.h *= 60;
    if (hsb.h < 0) {
      hsb.h += 360;
    }
    hsb.s *= 100 / 255;
    hsb.b *= 100 / 255;
    return hsb;
  }

  // src/js/colorpicker/pubsub.js
  var PubSub = class {
    constructor() {
      this.subscribers = [];
    }
    on(fn) {
      this.subscribers.push(fn);
    }
    off(fn) {
      this.subscribers = this.subscribers.filter((el) => el !== fn);
    }
    emit(data) {
      this.subscribers.forEach((el) => el(data));
    }
  };

  // src/js/colorpicker/color-slider.js
  var ColorSlider = class {
    constructor(place) {
      this.onColorSelect = new PubSub();
      this.place = place;
      this.dragged = false;
      this.cursorPos = { x: 0, y: 0 };
      this.createElement();
      this.setBgGradient();
      this.bindEvents();
    }
    createElement() {
      this.el = document.createElement("div");
      this.el.classList.add("color-canvas");
      this.canvas = document.createElement("canvas");
      this.canvas.classList.add("color-canvas-canvas");
      this.el.append(this.canvas);
      this.dragEl = document.createElement("div");
      this.dragEl.classList.add("color-canvas-drag");
      this.el.append(this.dragEl);
      this.place.append(this.el);
      this.canvas.width = this.canvas.offsetWidth;
      this.canvas.height = this.canvas.offsetHeight;
      this.ctx = this.canvas.getContext("2d");
    }
    setBgGradient(bgColor) {
      this.ctx.fillStyle = bgColor;
      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
      let gradientH = this.ctx.createLinearGradient(0, 0, this.canvas.width, 0);
      gradientH.addColorStop(0.01, "#fff");
      gradientH.addColorStop(0.99, "rgba(255,255,255, 0)");
      this.ctx.fillStyle = gradientH;
      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
      let gradientV = this.ctx.createLinearGradient(0, 0, 0, this.canvas.height);
      gradientV.addColorStop(0.1, "rgba(0,0,0,0)");
      gradientV.addColorStop(0.99, "#000");
      this.ctx.fillStyle = gradientV;
      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
    }
    updatePickerColor() {
      this.dragEl.style.left = `${this.cursorPos.x}px`;
      this.dragEl.style.top = `${this.cursorPos.y}px`;
      this.color = this.getColor();
      this.dragEl.style.background = this.color.rgb;
    }
    drag(e) {
      const g = this.canvas.getBoundingClientRect();
      let x = clamp(e.pageX - (g.left + window.scrollX), 0, g.width);
      let y = clamp(e.pageY - (g.top + window.scrollY), 0, g.height);
      this.cursorPos.y = Math.abs(y);
      this.cursorPos.x = Math.abs(x);
      if (this.cursorPos.x > this.canvas.width - 1) {
        this.cursorPos.x = this.canvas.width - 1;
      }
      this.color = this.getColor();
      this.updatePickerColor();
      this.onColorSelect.emit(this.color);
    }
    bindEvents() {
      this.canvas.addEventListener("mousedown", (e) => {
        this.dragged = true;
        this.drag(e);
      });
      document.addEventListener("mousemove", (e) => {
        if (this.dragged)
          this.drag(e);
      });
      document.addEventListener("mouseup", () => {
        this.dragged = false;
      });
    }
    setColor(color) {
      this.color = color;
      const colorRGB = hex2rgb(color);
      const hslColor = rgb2hsl(colorRGB.r, colorRGB.g, colorRGB.b);
      const hue = hslColor[0] * 360;
      const newHueRgb = hsl2rgb(hue / 360, 1, 0.5);
      const newHueRgbText = `rgb(${newHueRgb.join(",")})`;
      this.setBgGradient(newHueRgbText);
      const hsb = hex2hsb(color);
      const x = clamp(Math.ceil(hsb.s / (100 / this.canvas.width)), 0, this.canvas.width - 1);
      const y = clamp(this.canvas.height - Math.ceil(hsb.b / (100 / this.canvas.height)), 0, this.canvas.height);
      this.cursorPos = { x, y };
      this.updatePickerColor();
    }
    getColor() {
      const pixel = this.ctx.getImageData(this.cursorPos.x, this.cursorPos.y, 1, 1).data;
      const rgb = `rgb(${pixel[0]},${pixel[1]},${pixel[2]})`;
      return {
        rgb,
        r: pixel[0],
        g: pixel[1],
        b: pixel[2]
      };
    }
  };

  // src/js/colorpicker/hue-slider.js
  var HueSlider = class {
    constructor(place) {
      this.onHueSelect = new PubSub();
      this.place = place;
      this.dragged = false;
      this.cursorPos = { x: 0, y: 0 };
      this.createElement();
      this.setBgGradient();
      this.bindEvents();
    }
    createElement() {
      this.el = document.createElement("div");
      this.el.classList.add("color-hue");
      this.canvas = document.createElement("canvas");
      this.canvas.classList.add("color-hue-canvas");
      this.el.append(this.canvas);
      this.dragEl = document.createElement("div");
      this.dragEl.classList.add("color-hue-drag");
      this.el.append(this.dragEl);
      this.place.append(this.el);
      this.canvas.width = this.canvas.offsetWidth;
      this.canvas.height = this.canvas.offsetHeight;
      this.ctx = this.canvas.getContext("2d");
    }
    setBgGradient() {
      const gradientHue = this.ctx.createLinearGradient(0, 0, this.canvas.width, 0);
      gradientHue.addColorStop(0, "red");
      gradientHue.addColorStop(0.17, "yellow");
      gradientHue.addColorStop(0.33, "lime");
      gradientHue.addColorStop(0.5, "cyan");
      gradientHue.addColorStop(0.66, "blue");
      gradientHue.addColorStop(0.83, "magenta");
      gradientHue.addColorStop(1, "red");
      this.ctx.fillStyle = gradientHue;
      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
    }
    bindEvents() {
      this.canvas.addEventListener("mousedown", (e) => {
        this.dragged = true;
        this.drag(e);
      });
      document.addEventListener("mousemove", (e) => {
        if (this.dragged)
          this.drag(e);
      });
      document.addEventListener("mouseup", (e) => {
        this.dragged = false;
      });
    }
    drag(e) {
      const g = this.canvas.getBoundingClientRect();
      let x = clamp(e.pageX - (g.left + window.scrollX), 0, g.width);
      this.cursorPos.x = Math.abs(x);
      if (this.cursorPos.x > this.canvas.width - 1) {
        this.cursorPos.x = this.canvas.width - 1;
      }
      this.cursorPos.y = g.height / 2;
      const color = this.getColor();
      this.dragEl.style.left = `${x}px`;
      this.dragEl.style.background = color.rgb;
      this.onHueSelect.emit(color);
    }
    setColor(color) {
      const colorRGB = hex2rgb(color);
      const hslColor = rgb2hsl(colorRGB.r, colorRGB.g, colorRGB.b);
      const hue = hslColor[0] * 360;
      const percent = hue / 360 * 100;
      this.cursorPos.x = Math.round(this.canvas.width * percent / 100);
      this.dragEl.style.left = `${this.cursorPos.x}px`;
      const colorGet = this.getColor();
      this.dragEl.style.background = colorGet.rgb;
      this.onHueSelect.emit(colorGet);
    }
    getColor() {
      const pixel = this.ctx.getImageData(this.cursorPos.x, this.cursorPos.y, 1, 1).data;
      const rgb = `rgb(${pixel[0]},${pixel[1]},${pixel[2]})`;
      return {
        rgb,
        r: pixel[0],
        g: pixel[1],
        b: pixel[2]
      };
    }
  };

  // src/js/colorpicker/color-library.js
  var ColorLibrary = class {
    constructor(place, libraryID, colorPicker) {
      this.onColorSelect = new PubSub();
      this.onColorsChange = new PubSub();
      this.colorPicker = colorPicker;
      this.libraryID = libraryID;
      this.place = place;
      this.colors = [];
      this.readColorsFromStorage();
      this.createElement();
    }
    readColorsFromStorage() {
      if (localStorage.getItem(`colorPicker-${this.libraryID}`))
        this.colors = JSON.parse(localStorage.getItem(`colorPicker-${this.libraryID}`));
    }
    createElement() {
      this.el = document.createElement("div");
      this.el.classList.add("color-library");
      const btnAdd = document.createElement("button");
      btnAdd.classList.add("color-library-add");
      btnAdd.type = "button";
      btnAdd.textContent = "+";
      this.el.append(btnAdd);
      btnAdd.addEventListener("click", () => {
        const color = this.colorPicker.getColor();
        const hex = rgb2hex(color.r, color.g, color.b);
        this.addColor(hex);
      });
      this.colorsDiv = document.createElement("div");
      this.colorsDiv.classList.add("color-library-colors");
      this.el.append(this.colorsDiv);
      this.place.append(this.el);
      this.createColors();
    }
    createColors() {
      this.colorsDiv.textContent = "";
      this.colors.forEach((color) => this.createColorElement(color));
    }
    deleteColor(index) {
      this.colors.splice(index, 1);
      localStorage.setItem(`colorPicker-${this.libraryID}`, JSON.stringify(this.colors));
      this.onColorsChange.emit(this.colors);
      this.createColors();
    }
    addColor(color) {
      this.colors.push(color);
      localStorage.setItem(`colorPicker-${this.libraryID}`, JSON.stringify(this.colors));
      this.createColors();
      this.onColorsChange.emit(this.colors);
    }
    createColorElement(color) {
      const el = document.createElement("div");
      el.classList.add("color-library-el");
      el.style.background = color;
      el.addEventListener("click", () => {
        this.onColorSelect.emit(color);
      });
      const elDel = document.createElement("button");
      elDel.classList.add("color-library-el-delete");
      elDel.type = "button";
      elDel.textContent = "usu\u0144";
      el.append(elDel);
      elDel.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();
        const elements = [...this.colorsDiv.querySelectorAll(".color-library-el")];
        const index = elements.indexOf(el);
        if (index !== -1) {
          this.deleteColor(index);
        }
      });
      this.colorsDiv.append(el);
    }
    updateColors() {
      if (localStorage.getItem(`colorPicker-${this.libraryID}`)) {
        this.colors = JSON.parse(localStorage.getItem(`colorPicker-${this.libraryID}`));
      }
      console.log(this.libraryID, this.colors);
      this.createColors();
    }
  };

  // src/js/colorpicker/colorpicker.js
  var allPickers = {};
  var ColorPicker = class {
    constructor(place, opts) {
      this.onButtonClick = new PubSub();
      this.onColorSelect = new PubSub();
      this.onLibraryColorsChange = new PubSub();
      this.place = place;
      this.color = "#FF0000";
      this.options = {
        ...{
          libraryID: "colors"
        },
        ...opts
      };
      this.createElement();
      this.setColor(this.color);
      if (allPickers[this.options.libraryID] === void 0)
        allPickers[this.options.libraryID] = [];
      allPickers[this.options.libraryID].push(this);
    }
    createElement() {
      this.el = document.createElement("div");
      this.el.classList.add("color");
      this.place.append(this.el);
      this.hue = new HueSlider(this.el);
      this.canvas = new ColorSlider(this.el);
      this.input = document.createElement("input");
      this.input.classList.add("color-input");
      this.el.append(this.input);
      this.input.addEventListener("keyup", (e) => {
        if (e.key === "Enter") {
          if (/^#[a-fA-F0-9]{6}$/.test(this.input.value)) {
            this.setColor(`${this.input.value}`);
          }
        }
      });
      this.button = document.createElement("button");
      this.button.classList.add("color-btn");
      this.button.textContent = "Select";
      this.button.type = "button";
      this.el.append(this.button);
      this.button.addEventListener("click", () => {
        this.onButtonClick.emit(this.color);
      });
      this.hue.onHueSelect.on((color) => {
        this.canvas.setBgGradient(rgb2hex(color.r, color.g, color.b));
        this.canvas.updatePickerColor();
      });
      this.canvas.onColorSelect.on((color) => {
        const hex = rgb2hex(color.r, color.g, color.b);
        this.color = hex;
        this.input.value = hex;
        this.onColorSelect.emit(this.color);
      });
      this.library = new ColorLibrary(this.el, this.options.libraryID, this.canvas);
      this.library.onColorSelect.on((color) => {
        this.input.value = color;
        this.setColor(color);
      });
      this.library.onColorsChange.on((colors) => {
        this.onLibraryColorsChange.emit(colors);
      });
      this.library.onColorsChange.on((colors) => {
        this.onLibraryColorsChange.emit(colors);
        allPickers[this.options.libraryID].forEach((cp) => cp.updateLibrary());
      });
    }
    setColor(color) {
      this.color = color;
      this.hue.setColor(color);
      this.canvas.setColor(color);
      this.input.value = color;
    }
    updateLibrary() {
      console.log("up");
      this.library.updateColors();
    }
  };

  // src/js/app.js
  function copyAlert() {
    const div = document.createElement("div");
    div.classList.add("copied");
    div.innerText = "Copied do clipboard";
    document.body.append(div);
    setTimeout((e) => {
      div.remove();
    }, 800);
  }
  function bindEventToIcons() {
    const elements = document.querySelectorAll(".icon");
    elements.forEach((el) => {
      el.querySelector(".icon-content").addEventListener("click", () => {
        el.style.zIndex = 1e6;
        const anim = el.animate([
          { transform: `scale(1)`, boxShadow: `inset 0 0 0 2px black` },
          { transform: `scale(1.2)`, boxShadow: `inset 0 0 0 4px black` },
          { transform: `scale(1)`, boxShadow: `inset 0 0 0 2px black` }
        ], {
          duration: 300,
          iterations: 1
        });
        anim.onfinish = (e) => {
          el.style.zIndex = "";
          copyTextToClipboard(el.querySelector(".icon-img").innerHTML.trim());
          copyAlert();
        };
      });
      el.querySelector(".icon-checkbox").addEventListener("click", (e) => {
        e.stopPropagation();
        const item = localStorage.getItem("favorites");
        let favorites = [];
        if (item) {
          favorites = JSON.parse(item);
        }
        const name = el.dataset.name;
        const set = new Set(favorites);
        if (e.target.checked) {
          set.add(name);
        } else {
          set.delete(name);
        }
        localStorage.setItem("favorites", JSON.stringify([...set]));
        enableDisableFavoriteBtn();
      });
      el.querySelector(".icon-css").addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();
        let data = e.target.closest(".icon").querySelector(".icon-img svg").outerHTML.trim();
        data = data.replaceAll(`"`, `'`);
        data = data.replaceAll(">", "%3E");
        data = data.replaceAll("<", "%3C");
        data = data.replaceAll("#", "%23");
        data = data.replace(/(?:\r\n|\r|\n)/g, "");
        let text = `background-image: url("data:image/svg+xml,${data}");`;
        copyTextToClipboard(text);
        copyAlert();
      });
      el.querySelector(".icon-download").addEventListener("click", (e) => {
        e.stopPropagation();
        e.preventDefault();
        const a = document.createElement("a");
        const svgCode = el.querySelector(".icon-img svg").outerHTML.trim();
        a.setAttribute("href", "data:text/plain;charset=utf-8," + encodeURIComponent(svgCode));
        a.setAttribute("download", el.dataset.name);
        a.style.display = "none";
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
      });
    });
  }
  function bindButtons() {
    function debounced(delay, fn) {
      let timerId;
      return function(...args) {
        if (timerId) {
          clearTimeout(timerId);
        }
        timerId = setTimeout(() => {
          fn(...args);
          timerId = null;
        }, delay);
      };
    }
    function filterIcons() {
      const val = input.value;
      const elements = document.querySelectorAll(".icon");
      [...elements].forEach((div) => {
        const name = div.dataset.name;
        div.hidden = !name.includes(val);
      });
    }
    const tHandler = debounced(200, filterIcons);
    const input = document.querySelector("#inputFilter");
    input.oninput = tHandler;
    input.disabled = false;
    let smallLayout = false;
    if (localStorage.getItem("smallLayout") === "true") {
      smallLayout = true;
    }
    function setLayout() {
      document.body.classList.toggle("small-layout", smallLayout);
      localStorage.setItem("smallLayout", smallLayout);
    }
    document.querySelector("#toggleNames").onclick = (e) => {
      smallLayout = !smallLayout;
      setLayout();
    };
    document.querySelector("#favorite").onclick = (e) => {
      e.currentTarget.classList.toggle("is-active");
      if (e.currentTarget.classList.contains("is-active")) {
        showFavorites();
      } else {
        const ev = new Event("input");
        input.dispatchEvent(ev);
      }
    };
    setLayout();
  }
  function showFavorites() {
    const elements = document.querySelectorAll(".icon");
    const item = localStorage.getItem("favorites");
    if (item) {
      const arr = JSON.parse(item);
      if (arr.length) {
        [...elements].forEach((div) => {
          const name = div.dataset.name;
          div.hidden = !arr.includes(name);
        });
      }
    }
  }
  function setFavoriteCheckbox() {
    const elements = document.querySelectorAll(".icon");
    const item = localStorage.getItem("favorites");
    if (item) {
      const arr = JSON.parse(item);
      if (arr.length) {
        [...elements].forEach((div) => {
          const name = div.dataset.name;
          div.querySelector(".icon-checkbox").checked = arr.includes(name);
        });
      }
    }
  }
  function stickyHeader() {
    const header = document.querySelector(".header");
    window.onscroll = (e) => {
      header.classList.toggle("is-sticky", window.scrollY > 0);
    };
    header.classList.toggle("is-sticky", window.scrollY > 0);
  }
  function enableDisableFavoriteBtn() {
    const btn = document.querySelector("#favorite");
    btn.disabled = true;
    const item = localStorage.getItem("favorites");
    if (item) {
      const arr = JSON.parse(item);
      if (arr.length) {
        btn.disabled = false;
      }
    }
  }
  function initColorPicker() {
    var parent = document.querySelector("#colorPickerInside div");
    const cp = new ColorPicker(parent, {
      initColor: "#ff00ff",
      showLibrary: true,
      showButtonOK: true,
      dynamic: false,
      libraryID: "myColors"
    });
    cp.onButtonClick.on((color) => {
      const elements = [...document.querySelectorAll(".icon")];
      const colorize = () => {
        if (elements.length) {
          let arr = elements.splice(0, 100);
          for (let el of arr) {
            const svg = el.querySelector(".icon-img svg");
            const svgOriginal = el.querySelector(".icon-img-original svg");
            svg.outerHTML = svgOriginal.outerHTML.replaceAll("currentColor", color.slice(0, 7));
          }
          setTimeout(() => colorize(), 0);
        }
      };
      colorize();
    });
    document.querySelector("#colorPicker").addEventListener("click", (e) => {
      e.stopPropagation();
      e.currentTarget.classList.toggle("is-active");
    });
    document.querySelector("#colorPickerInside").addEventListener("click", (e) => {
      e.stopPropagation();
    });
    document.addEventListener("click", (e) => {
      document.querySelector("#colorPicker").classList.remove("is-active");
    });
  }
  function popupHelp() {
    const popup = document.querySelector(".popup");
    const close = document.querySelector(".popup-close");
    const toggle = document.querySelector(".btn-help");
    toggle.addEventListener("click", (e) => {
      document.body.classList.add("popup-show");
      popup.classList.add("is-show");
    });
    close.addEventListener("click", (e) => {
      document.body.classList.remove("popup-show");
      popup.classList.remove("is-show");
    });
    document.addEventListener("keyup", (e) => {
      if (e.key === "Escape") {
        close.click();
      }
    });
  }
  function initApp() {
    initColorPicker();
    stickyHeader();
    setFavoriteCheckbox();
    bindButtons();
    bindEventToIcons();
    enableDisableFavoriteBtn();
    popupHelp();
  }
  initApp();
})();
